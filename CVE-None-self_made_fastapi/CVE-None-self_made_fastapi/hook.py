import asyncio.events as aioevents
from contextvars import Context, ContextVar, copy_context
import os

class ReqId:
    total = 0
    last = 0
    current: ContextVar[int] = ContextVar("request_id")

    @classmethod
    def new(cls) -> int:
        cls.total += 1
        return cls.total


null_fd = os.open("/dev/null", os.O_WRONLY)

class HookedHandle(aioevents.Handle):
    def _run(self):
        self._context: Context

        req_id = self._context.get(ReqId.current)
        if req_id is None:
            req_id = 0
        if req_id != ReqId.last:
            # os.write(null_fd, f"python request_end {os.getpid()}:{ReqId.last}".encode("utf-8"))
            ReqId.last = req_id
            # 要写入的数据
            os.write(null_fd, f"python request_start {os.getpid()}-{req_id}".encode("utf-8"))
        super()._run()
        # if req_id != 0:
        #     os.write(null_fd, f"python request_end {os.getpid()}:{req_id}\n".encode("utf-8"))


class HookedTimerHandle(aioevents.TimerHandle, HookedHandle):
    pass


# monkey patch
aioevents.Handle = HookedHandle
aioevents.TimerHandle = HookedTimerHandle

# print("Hooked asyncio")

# from starlette.middleware.base import BaseHTTPMiddleware

# class RecordMiddleware(BaseHTTPMiddleware):  
#     async def dispatch(self, request, call_next):  
#         req_id = ReqId.new()  

#         # 在当前上下文中设置 req_id  
#         token = ReqId.current.set(req_id)  
#         try:  
#             # 处理请求
#             os.write(null_fd, (f"python request_init {os.getpid()}:{req_id}" + str(request.scope)).encode("utf-8"))
#             response = await call_next(request)
#         finally:  
#             # 重置上下文变量  
#             ReqId.current.reset(token)  
#         return response  


class RecordMiddleware:
    def __init__(self, app):
        self.app = app

    async def __call__(self, scope, receive, send):
        if scope["type"] == "http":
            req_id = ReqId.new()
            token = ReqId.current.set(req_id)
            try:
                os.write(null_fd, (f"python request_init {os.getpid()}-{req_id}").encode("utf-8"))
                await self.app(scope, receive, send)
            finally:
                ReqId.current.reset(token)
        else:
            await self.app(scope, receive, send)