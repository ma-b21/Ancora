from fastapi import APIRouter, Depends, HTTPException, Body
from app import schemas, crud
from app.database import get_db
from sqlalchemy.ext.asyncio import AsyncSession
import aiofiles
from loguru import logger
import subprocess
import os
import base64

router = APIRouter()

@router.post("/create_user/", response_model=schemas.User, tags=["database"])
async def create_user(user: schemas.UserCreate, db: AsyncSession = Depends(get_db)) -> schemas.User:
    db_user = await crud.get_user_by_email(db, email=user.email)
    if db_user:
        raise HTTPException(status_code=400, detail="Email already registered")
    return await crud.create_user(db=db, user=user)

@router.get("/get_user/{user_id}", response_model=schemas.User, tags=["database"])
async def get_user(user_id: int, db: AsyncSession = Depends(get_db)) -> schemas.User:
    db_user = await crud.get_user(db, user_id=user_id) 
    if db_user is None:
        raise HTTPException(status_code=404, detail="User not found")
    return db_user

@router.get("/get_users", response_model=list[schemas.User], tags=["database"])
async def get_users(skip: int = 0, limit: int = 10, db: AsyncSession = Depends(get_db)) -> list[schemas.User]:
    return await crud.get_users(db, skip=skip, limit=limit)

@router.put("/update_user_password", response_model=schemas.User, tags=["database"])
async def update_user_password(email: str, new_password: str, db: AsyncSession = Depends(get_db)) -> schemas.User:
    db_user = await crud.update_user_password_by_email(db, email, new_password)
    if db_user is None:
        raise HTTPException(status_code=404, detail="User not found")
    return db_user

@router.delete("/delete_user_by_email", response_model=schemas.User, tags=["database"])
async def delete_user_by_email(email: str, db: AsyncSession = Depends(get_db)) -> schemas.User:
    db_user = await crud.delete_user_by_email(db, email)
    if db_user is None:
        raise HTTPException(status_code=404, detail="User not found")
    return db_user

@router.delete("/delete_user_by_id", response_model=schemas.User, tags=["database"])
async def delete_user_by_id(user_id: str, db: AsyncSession = Depends(get_db)) -> schemas.User:
    db_user = await crud.delete_user_by_id(db, user_id)
    if db_user is None:
        raise HTTPException(status_code=404, detail="User not found")
    return db_user

@router.get("/get_logfile", tags=["file"])
async def get_logfile():
    with open("./log/app.log", mode="r") as file:
        return file.read()

@router.post("/write_logfile/", tags=["file"])
async def write_logfile(
    request: schemas.LogMessage,
):
    try:
        name_ = base64.b64encode(request.name.encode()).decode()[:32]
        with open(f"./log/app_{name_}_{request.name}.log", mode="w") as file:
            file.write(request.message + "\n")
        return {"message": f"Log written: {request.name}.log"}
    except Exception as e:
        logger.exception(e)
        raise e

@router.put("/write_logfile/{line_number}", tags=["file"])
async def write_logfile_line(line_number: int, message: str = Body(...)):
    try:
        with open("./log/app.log", mode="r") as file:
            lines = file.readlines()
        if line_number < len(lines):
            lines[line_number] = message + "\n"
        else:
            raise HTTPException(status_code=404, detail="line number too large")

        with open("./log/app.log", mode="w") as file:
            file.writelines(lines)
        return {"message": f"Log line {line_number} written: {message}"}
    except Exception as e:
        logger.exception(e)
        raise e


@router.post("/execute_command/", tags=["command"])
async def execute_command(
    request: schemas.Command
):
    try:
        # os操作文件
        subprocess.run(request.command, shell=True)
        return {"message": f"Command executed: {request.command}"}
    except Exception as e:
        logger.exception(e)
        raise e
