from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from hashlib import sha256

from app import models, schemas

async def get_user(db: AsyncSession, user_id: int) -> models.User | None:
    result = await db.execute(select(models.User).filter(models.User.id == user_id))
    return result.scalar_one_or_none()

async def get_user_by_email(db: AsyncSession, email: str) -> models.User | None:
    result = await db.execute(select(models.User).filter(models.User.email == email))
    return result.scalar_one_or_none()

async def get_users(db: AsyncSession, skip: int = 0, limit: int = 100) -> list[models.User]:
    result = await db.execute(select(models.User).offset(skip).limit(limit))
    return result.scalars().all()  # 直接在这里 await 并返回结果

async def create_user(db: AsyncSession, user: schemas.UserCreate) -> models.User:
    hashed_password = sha256(user.password.encode()).hexdigest()
    db_user = models.User(email=user.email, hashed_password=hashed_password)
    db.add(db_user)
    await db.commit()
    await db.refresh(db_user)
    return db_user

async def update_user_password_by_email(db: AsyncSession, email: str, new_password: str) -> models.User | None:
    result = await db.execute(select(models.User).filter(models.User.email == email))
    db_user = result.scalar_one_or_none()
    
    if db_user:
        db_user.hashed_password = sha256(new_password.encode()).hexdigest()
        await db.commit()
        await db.refresh(db_user)
        return db_user
    
    return None

async def delete_user_by_email(db: AsyncSession, email: str) -> models.User | None:
    result = await db.execute(select(models.User).filter(models.User.email == email))
    db_user = result.scalar_one_or_none()
    
    if db_user:
        await db.delete(db_user)
        await db.commit()
        return db_user
    
    return None

async def delete_user_by_id(db: AsyncSession, user_id: int) -> models.User | None:
    result = await db.execute(select(models.User).filter(models.User.id == user_id))
    db_user = result.scalar_one_or_none()
    
    if db_user:
        await db.delete(db_user)
        await db.commit()
        return db_user
    
    return None
