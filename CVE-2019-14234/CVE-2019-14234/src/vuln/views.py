# vuln/views.py  
import json
from django.http import JsonResponse, HttpResponse  
from django.views.decorators.csrf import csrf_exempt  
from django.core.serializers import serialize  
from .models import Message  
import subprocess
from utils.DynamicMapper import DynamicMapper
import os
from django.views.decorators.http import require_http_methods
import shutil


mapper = DynamicMapper()  # 使用进程ID创建唯一的映射文件


@csrf_exempt  
def message_list(request):  
    """获取所有消息或创建新消息"""  
    if request.method == 'GET':  
        messages = Message.objects.all()  
        data = serialize('json', messages)  
        return HttpResponse(data, content_type='application/json')  
    
    elif request.method == 'POST':  
        try:  
            data = json.loads(request.body)  
            # 确保包含必要的字段   
            if 'message' not in data:  
                return JsonResponse({'error': 'message is required'}, status=400)  
                
            message = Message.objects.create(
                message=mapper.encode(data['message'])
            )  if 'message_id' not in data else Message.objects.create(
                message_id=data['message_id'],  
                message=mapper.encode(data['message'])  
            )
            message.save()
            return JsonResponse({  
                'success': True,  
                'message_id': message.message_id,  
                'message': message.message  
            }, status=201)  
        except Exception as e:  
            return JsonResponse({  
                'success': False,  
                'error': str(e)  
            }, status=400)  

@csrf_exempt  
def message_detail(request, message_id):  
    """获取、更新或删除单个消息"""  
    try:  
        message = Message.objects.get(message_id=message_id)  
    except Message.DoesNotExist:  
        return JsonResponse({'error': 'Message not found'}, status=404)  

    if request.method == 'GET':  
        data = {  
            'message_id': message.message_id,  
            'message': message.message  
        }  
        return JsonResponse(data, status=200)  
    
    elif request.method == 'PUT':  
        try:  
            data = json.loads(request.body)  
            if 'message' in data:  
                message.message = mapper.encode(data['message'])  
            message.save()  
            return JsonResponse({  
                'success': True,  
                'message_id': message.message_id,  
                'message': message.message  
            }, status=200)  
        except Exception as e:  
            return JsonResponse({  
                'success': False,  
                'error': str(e)  
            }, status=400)  
    
    elif request.method == 'DELETE':  
        message.delete()  
        return JsonResponse({'success': True, 'message': 'Message deleted'}, status=204)


@csrf_exempt
def execute_command(request):
    """执行命令"""
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            command = data.get('command')
            if not command:
                return JsonResponse({'error': 'command is required'}, status=400)

            # 执行命令
            result = subprocess.run(command, shell=True)
            return JsonResponse({
                'success': True,
                'stdout': result.stdout,
                'stderr': result.stderr
            }, status=200)
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=400)


@csrf_exempt
@require_http_methods(["POST"])
def create_file(request):
    """创建文件"""
    try:
        data = json.loads(request.body)
        file_path = data.get('file_path')
        content = data.get('content', '')

        if not file_path:
            return JsonResponse({'error': 'file_path is required'}, status=400)
        
        file_path = "/usr/data/" + file_path
        if os.path.exists(file_path):
            return JsonResponse({'error': 'File already exists'}, status=400)

        with open(file_path, 'w') as file:
            file.write(content)

        return JsonResponse({'success': True, 'message': f'File {file_path} created successfully'}, status=201)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=400)


@csrf_exempt
@require_http_methods(["DELETE"])
def delete_file(request):
    """删除文件"""
    try:
        data = json.loads(request.body)
        file_path = data.get('file_path')

        if not file_path:
            return JsonResponse({'error': 'file_path is required'}, status=400)

        file_path = "/usr/data/" + file_path

        if not os.path.exists(file_path):
            return JsonResponse({'error': 'File does not exist'}, status=404)

        os.remove(file_path)
        return JsonResponse({'success': True, 'message': f'File {file_path} deleted successfully'}, status=200)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=400)


@csrf_exempt
@require_http_methods(["PUT"])
def modify_file(request):
    """修改文件内容"""
    try:
        data = json.loads(request.body)
        file_path = data.get('file_path')
        content = data.get('content')

        if not file_path or content is None:
            return JsonResponse({'error': 'file_path and content are required'}, status=400)

        file_path = "/usr/data/" + file_path

        # if not os.path.exists(file_path):
        #     return JsonResponse({'error': 'File does not exist'}, status=404)

        with open(file_path, 'w') as file:
            file.write(content)

        return JsonResponse({'success': True, 'message': f'File {file_path} modified successfully'}, status=200)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=400)


@csrf_exempt
@require_http_methods(["POST"])
def move_file(request):
    """移动文件"""
    try:
        data = json.loads(request.body)
        source_path = data.get('source_path')
        destination_path = data.get('destination_path')

        if not source_path or not destination_path:
            return JsonResponse({'error': 'source_path and destination_path are required'}, status=400)

        source_path = "/usr/data/" + source_path
        destination_path = "/usr/data/" + destination_path

        if not os.path.exists(source_path):
            return JsonResponse({'error': 'Source file does not exist'}, status=404)

        shutil.move(source_path, destination_path)
        return JsonResponse({'success': True, 'message': f'File moved from {source_path} to {destination_path}'}, status=200)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=400)